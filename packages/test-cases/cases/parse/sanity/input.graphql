scalar UInt
scalar UInt8
scalar UInt16
scalar UInt32
scalar Int
scalar Int8
scalar Int16
scalar Int32
scalar Bytes
scalar BigInt
scalar BigNumber
scalar JSON
scalar Map

directive @imported(
  uri: String!
  namespace: String!
  nativeType: String!
) on OBJECT | ENUM

directive @imports(
  types: [String!]!
) on OBJECT

directive @capability(
  type: String!
  uri: String!
  namespace: String!
) repeatable on OBJECT

directive @enabled_interface on OBJECT

directive @annotate(type: String!) on FIELD

directive @env(required: Boolean!) on FIELD_DEFINITION

"""
CustomEnum comment
"""
enum CustomEnum {
  TEXT
  BINARY
}

"""
CustomType multi-line comment
line 2
"""
type CustomType {
"""
str comment
"""
  str: String!
"""
optStr comment
"""
  optStr: String
  u: UInt!
  optU: UInt
  u8: UInt8!
  u16: UInt16!
  u32: UInt32!
  i: Int!
  i8: Int8!
  i16: Int16!
  i32: Int32!
  bigint: BigInt!
  optBigint: BigInt
  bignumber: BigNumber!
  optBignumber: BigNumber
  json: JSON!
  optJson: JSON
  bytes: Bytes!
  uArray: [UInt!]!
  uOptArray: [UInt!]
  optUOptArray: [UInt]
  optStrOptArray: [String]
  uArrayArray: [[UInt!]!]!
  uOptArrayOptArray: [[UInt32]]!
  uArrayOptArrayArray: [[[UInt32!]!]]!
  crazyArray: [[[[UInt32!]]!]]
  objectArray: [UserObject!]!
  objectArrayArray: [[UserObject!]!]!
  nestedObject: UserObject!
  optNestedObject: UserObject
  optEnum: CustomEnum
  enum: CustomEnum!
  enumArray: [CustomEnum!]!,
  optEnumArray: [CustomEnum],
  map: Map! @annotate(type: "Map<String!, Int>!")
  mapOfArr: Map! @annotate(type: "Map<String!, [Int!]!>!")
  mapOfObj: Map! @annotate(type: "Map<String!, AnotherType!>!")
  mapOfArrOfObj: Map! @annotate(type: "Map<String!, [AnotherType!]!>!")
}

"""
AnotherType comment
"""
type AnotherType {
"""
prop comment
"""
  prop: String
}

"""
UserObject comment
"""
type UserObject {
  fieldA: String
  fieldB: Int!
}

type UserObjectFromInterface implements UserObject {
  fieldA: String
  fieldB: Int!
  fieldC: UInt32!
}

type Env {
  prop: String!
  propM: Int!
}

"""
ImplementationObject comment
"""
type ImplementationObject implements Interface_Object & Interface_Object2 {
"""
anotherProp comment
"""
  anotherProp: String
  str: String!
  uint8: UInt8!
  str2: String!
}

type ModuleObjectType {
  prop: String!
}

"""
Module comment
"""
type Module implements Interface_Module @imports(
  types: [ "TestImport_Module", "Interface_Module" ]
) @capability(
  type: "getImplementations",
  uri: "testimport.uri.eth",
  namespace: "TestImport",
) {
"""
moduleMethod comment
"""
  moduleMethod(
"""
arg comment
"""
    arg: String!
  ): [Int]!
"""
userObjectMethod comment
"""
  userObjectMethod(
"""
userObject comment
"""
    userObject: UserObject
"""
arrayObject comment
"""
    arrayObject: [UserObject!]!
  ): UserObject!
"""
enumMethod comment
"""
  enumMethod(
"""
enum comment
"""
    enum: CustomEnum,
"""
arrayEnum comment
"""
    arrayEnum: [CustomEnum!]!
  ): CustomEnum!
"""
abstractMethod comment
"""
  abstractMethod(
    arg: UInt8!
  ): String!

  transformMap(
    map: Map @annotate(type: "Map<String!, Int!>")
  ): Map @annotate(type: "Map<String!, Int!>")

  methodRequireEnv(
    arg: String!
  ): Env! @env(required: true)

  methodOptionalEnv(
    arg: String!
  ): Env @env(required: false)
}

"""
TestImport_Module comment
"""
type TestImport_Module @imported(
  uri: "testimport.uri.eth",
  namespace: "TestImport",
  nativeType: "Module"
) @enabled_interface {
"""
importedMethod comment
"""
  importedMethod(
    str: String!
    optStr: String
    u: UInt!
    optU: UInt
"""
uArrayArray comment
"""
    uArrayArray: [[UInt]]!
  ): String!

  anotherMethod(
    arg: [String!]!
  ): [Int32]!

  importedObjectMethod(
    importedObject: TestImport_Object!
  ): TestImport_Object!

  importedEnumMethod(
    enum: TestImport_Enum!
    optEnum: TestImport_Enum
  ): TestImport_Enum!

  envMethod(
    arg: String!
  ): TestImport_Env! @env(required: true)

  optEnvMethod(
    arg: String!
  ): TestImport_Env @env(required: false)
}

"""
TestImport_Object comment
"""
type TestImport_Object @imported(
  uri: "testimport.uri.eth",
  namespace: "TestImport",
  nativeType: "Object"
) {
"""
prop comment
"""
  prop: String!
"""
nested comment
"""
  nested: TestImport_NestedObject!
}

"""
TestImport_NestedObject comment
"""
type TestImport_NestedObject @imported(
  uri: "testimport.uri.eth",
  namespace: "TestImport",
  nativeType: "NestedObject"
) {
"""
foo comment
"""
  foo: [String!]!
  circular: TestImport_Object
}

"""
TestImport_Enum comment
"""
enum TestImport_Enum @imported(
  namespace: "TestImport",
  uri: "testimport.uri.eth",
  nativeType: "Enum"
) {
  TEXT
  BYTES
}

"""
TestImport_Env comment
"""
type TestImport_Env @imported(
  uri: "testimport.uri.eth",
  namespace: "TestImport",
  nativeType: "Env"
) {
  envProp: UInt8!
}

"""
Interface_Module comment
"""
type Interface_Module @imported(
  uri: "interface.uri.eth",
  namespace: "Interface",
  nativeType: "Module"
) {
"""
abstractMethod comment
"""
  abstractMethod(
    arg: UInt8!
  ): String!
}

"""
Interface_Object comment
"""
type Interface_Object @imported(
  uri: "interface.uri.eth",
  namespace: "Interface",
  nativeType: "Object"
) {
  str: String!
  uint8: UInt8!
}

"""
Interface_Object2 comment
"""
type Interface_Object2 @imported(
  uri: "interface.uri.eth",
  namespace: "Interface",
  nativeType: "Object2"
) {
  str2: String!
}
